{
  "id": "post_333",
  "title": "Clean Architecture and Rails",
  "summary": "Ruby on Rails makes web application development easier by favoring convention over configuration. Its creators say it is optimized for programmer happiness, and lets us focus on the client's needs rather than the common tasks/chores involved in building every web application. Outside of \"The Rails Way,\" many other alternatives exist, so we decided to explore one of them.",
  "body": "<p>\r\n\tRuby on Rails makes web application development easier by favoring convention over configuration. Its creators say it is optimized for programmer happiness, and lets us focus on the client's needs rather than the common tasks/chores involved in building every web application. Outside of \"The Rails Way,\" many other alternatives exist, so we decided to explore one of them.</p><h3>Introducing: The Clean Architecture Template</h3><p>\r\n\tAwhile back, I wrote about \r\n\t<a href=\"http://www.smashingboxes.com/domain-logic-in-rails/\">domain logic in Rails</a> and promised a follow-up with an example. I decided rather than simply providing an example app, I'd rather have a template for generating them so it would be easy to create many apps and hopefully get feedback and contributions from the community. I've started working on a Rails template which <a href=\"https://github.com/reedlaw/rails-clean-architecture\">you can fork on Github</a> and will describe briefly what I've done here.</p><h3>The Rails Template</h3><p>\r\n\tRails has a basic, but quite usable, \r\n\t<a href=\"http://guides.rubyonrails.org/rails_application_templates.html\">API for app creation</a>. The blog post, <a href=\"http://technology.stitchfix.com/blog/2014/01/06/rails-app-templates/\">Rails Application Templates</a>, by Dave Copeland of Stitch Fix was of enormous help in getting me started writing a Rails template. For now, I want to keep it fairly standard and familiar for Rails developers to use, so I kept the directory structure intact. The major changes include:</p><ul>\r\n\t\r\n<li>Completely change the Gemfile by removing unnecessary gems such as jbuilder, sqlite, and sdoc and adding gems like hashie, pg, and tilt. These choices are debatable of course, but in keeping with the opinionated nature of Rails, I decided to pick these defaults.\r\n\t\r\n<ul>\r\n\t\t\r\n<li><a href=\"https://github.com/intridea/hashie\">Hashie</a> is a collection of Hash extensions that work very well for creating data objects to be passed between interactors and views.</li>\t\t\r\n<li>The pg gem is included simply because I feel PostgreSQL is the right way to begin a project.</li>\t\t\r\n<li><a href=\"https://github.com/rtomayko/tilt\">Tilt</a> is a gem that will hopefully enable sharing views between Rails and Javascript frameworks. Tilt enables multiple templating engines, including Handlebars, which is widely supported among Javascript frameworks. This aspect of Clean Architecture is still experimental as I describe below.</li>\t</ul></li>\t\r\n<li>Create two new generators, one for entities and one for interactors. These are invoked just like Rails standard generators (e.g. \"rails generate entity <em>name</em>\"). They also generate a spec file in spec/entities/<em>name</em>_spec.rb.</li>\t\r\n<li>Added a spec_helper.rb and provided some shared examples for entities and interactors.</li>\t\r\n<li>Revamp the controller generator to create the type of controller actions that are common to Clean Architecture-style apps. See the example below.</li>\t\r\n<li>TODO: create generators for repositories and Handlebars templates.</li></ul><h3>Clean Controllers</h3>\r\n<pre>class UsersController &lt; ApplicationController\r\n  respond_to :html\r\n  before_filter :authenticate_user!\r\n  def user_params\r\n    params.require(:user).permit :first_name, :last_name, :email, :password, :password_confirmation, :phone\r\n  end\r\n  private :user_params\r\n  def index\r\n    @response = BrowseUsers.new(@request).call.extend(UserPresenter)\r\n    respond_with @response\r\n  end\r\n  def show\r\n    @response = LoadUser.new(@request).call\r\n    respond_with @response\r\n  end\r\n  alias_method :edit, :show\r\n  def new\r\n    @response = NewUser.new(@request).call\r\n    respond_with @response\r\n  end\r\n  def create\r\n    @request.object_attributes = user_params\r\n    @response = SaveUser.new(@request).call\r\n    respond_with @response.user, location: users_path\r\n  end\r\n  alias_method :update, :create\r\n  def destroy\r\n    @response = DeleteUser.new(@request).call\r\n    respond_with @response, location: users_path\r\n  end\r\nend\r\n</pre><p>\r\n\tUse the generator like so:\r\n\t<code>rails generate controller users index show new create destroy</code>\r\n\tIt will work in much the same way as the controller I posted previously:</p><p>\r\n\tThe generator also adds rendering code that uses tilt-handlebars to render a template that can be shared between back-end and front-end.</p><h3>Decoupling UI from the Use Cases</h3><p>\r\n\tIn keeping with the theme of writing clean, decoupled code, I decided to root out the rendering portions of Rails by calling the Rails app generator with the following options:\r\n\t<code>--skip-action-view --skip-sprockets --skip-javascript</code></p><p>\r\n\tWhat does this mean for developers? The front-end is now completely decoupled from the back-end. Front-end developers are free to use their preferred tools such as Bower and Gulp to manage dependencies and front-end builds. Back-end developers are now free to focus entirely on the API without having to worry about finding up-to-date gems for their front-end framework of choice. Even full-stack developers who handle both front and back-end will benefit from the increased manageability and testability of the decoupled code.</p><h3>What Needs to be Done</h3><p>\r\n\tObviously this is not a complete framework or example for creating Rails apps according to the Clean Architecture pattern, but I hope it can at least spur more discussion and help people get started. I have only worked on one application using this design but there are many things I like about it. Of course there are big areas that could use improvement (such as the problem of making reusable serializers). I hope to work more in this area and provide more and better examples as I gain experience and receive feedback. Stay tuned, and be sure to \r\n\t<a href=\"https://github.com/reedlaw/rails-clean-architecture\" style=\"background-color: initial;\">check out the source code on Github</a>.</p><p>\r\n\t<em>\r\n\tCover photo by \r\n\t</em><a href=\"https://www.flickr.com/photos/boris-brueckhaeuser/\" style=\"background-color: initial;\"><em>Boris Bruckhauser</em></a></p>",
  "slug": "clean-architecture-and-rails",
  "slug_history": "---\n- cleanarchitectureandrails\n",
  "visits": 1616,
  "published": "2014-07-29T19:21:19+00:00",
  "authorName": "Reed Law",
  "category_id": 1,
  "image_uid": "2014/08/12/09/55/40/124/file",
  "created_at": "2014-07-29T19:20:28+00:00",
  "updated_at": "2014-12-03T21:45:16+00:00",
  "markdown": null,
  "image_alt_text": null,
  "featured": false,
  "database_id": 333,
  "category": {
    "type": "Entry",
    "id": "category_1"
  },
  "tags": [
    {
      "type": "tag",
      "id": "tag_2"
    },
    {
      "type": "tag",
      "id": "tag_2"
    }
  ],
  "authors": [
    {
      "type": "employee",
      "id": "employee_18"
    },
    {
      "type": "employee",
      "id": "employee_18"
    }
  ]
}