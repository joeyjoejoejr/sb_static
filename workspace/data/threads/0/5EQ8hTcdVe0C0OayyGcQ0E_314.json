{
  "id": "post_314",
  "title": "Heroku vs. Amazon Web Services",
  "summary": "There’s been a bit of discussion lately on deployment options. Much of the debate is centered around the relative merits of Heroku. We have some experience with Heroku and Amazon Web Services (AWS), so let’s dive into some comparisions. Price This is the only metric that counts for many clients, so it’s good to start…",
  "body": "<p>\r\n\tThere’s been a \r\n\t<a title=\"The Cloud Is Not for You\" href=\"http://justcramer.com/2012/06/02/the-cloud-is-not-for-you/\" target=\"_blank\">bit</a> of <a title=\"Heroku Isn't for Idiots\" href=\"http://rdegges.com/heroku-isnt-for-idiots\" target=\"_blank\">discussion</a> lately on deployment options. Much of the debate is centered around the relative merits of Heroku. We have some experience with Heroku and Amazon Web Services (AWS), so let’s dive into some comparisions.</p><h3>Price</h3><p>\r\n\tThis is the only metric that counts for many clients, so it’s good to start here. The trouble with price comparisons is that no two services are exactly the same, so it’s hard to do an apples-to-apples comparison. So let’s see what we can get at the entry level.</p><h3>Heroku</h3><ul>\r\n\t\r\n<li>Free for the first <a title=\"Heroku dyno\" href=\"https://devcenter.heroku.com/articles/dynos\" target=\"_blank\">dyno</a>\r\n\t</li></ul><p>\r\n\tYou can’t beat free, and this is actually quite a good offering. One dyno is plenty to run many kinds of apps. Brochure sites, simple APIs, and blogs are a few of the many possible uses for this free dyno. But to make the comparison fair, we need to know what this free dyno includes and what strings are attached.</p><ul>\r\n\t\r\n<li>RAM: 512MB</li>\t\r\n<li>Swap space: 1GB max</li>\t\r\n<li>Storage space: <a title=\"Max slug size\" href=\"https://devcenter.heroku.com/articles/slug-compiler#slug_size\" target=\"_blank\">100MB</a> max</li>\t\r\n<li>Compute power: unknown, but feels like something between a micro and a small EC2 instance.</li></ul><h5>Drawbacks</h5><ul>\r\n\t\r\n<li>Additional dynos/workers are $35 a month.</li>\t\r\n<li>No other services can be run on dynos. Dynos are strictly for application processes. Databases, background workers, and other services usually cost extra through Heroku’s add-ons or third party services.</li>\t\r\n<li>No way to increase RAM, storage, or CPU performance. Additional storage must be hosted separately through a service such as Amazon S3. App performance can only be improved by increasing the number of running dynos. Heroku automatically <a title=\"HTTP Routing\" href=\"https://devcenter.heroku.com/articles/http-routing\" target=\"_blank\">load balances and routes visitors to all available dynos</a>.</li>\t\r\n<li>No way to install system software. Heroku does provide some commonly-used packages such as Imagemagick, but if you need anything else, you’ll have to resort to <a title=\"Hacking Heroku with Custom Buildpacks\" href=\"http://quickleft.com/blog/hacking-heroku-with-custom-build-packs\" target=\"_blank\">hacks</a>.</li></ul><h3>Amazon Web Services (AWS)</h3><p>\r\n\tAmazon Elastic Compute Cloud (Amazon EC2) is the closest equivalent to Heroku’s dynos. One EC2 micro instance is approximately equivalent in terms of RAM and compute power to one of Heroku’s dynos/workers. However, in our experience, the performance of a full-stack Rails application on a single micro EC2 instance is not quite as good as on a single Heroku dyno. This could be because we were running database and workers on the same instance. We could have probably slimmed down the instance by removing unnecessary system processes, but instead we typically go with a small EC2 instance.\r\n\t<br>\r\n\t<a href=\"http://sbblog.s3.amazonaws.com/wp-content/uploads/2012/06/EC2_micro_small.png\"><img class=\"alignright size-full wp-image-441\" title=\"EC2 Micro and Small\" alt=\"EC2 Micro and Small\" src=\"http://sbblog.s3.amazonaws.com/wp-content/uploads/2012/06/EC2_micro_small.png\" width=\"658\" height=\"334\"></a><br>\r\nAs you can see, \r\n\t<a title=\"EC2 Pricing\" href=\"http://aws.amazon.com/ec2/pricing/\" target=\"_blank\">EC2 is much cheaper when paid for in advance</a>. Let’s just go with a one year heavy utilization reserved small instance for this comparison.</p><ul>\r\n\t\r\n<li>$27.77 a month on average (after amortizing the deposit and paying for the usage over one year).</li>\t\r\n<li>RAM: 1.7GB</li>\t\r\n<li>Swap space: configurable (presumably up to the total amount of storage space minus root partition)</li>\t\r\n<li>Storage space: 160GB</li>\t\r\n<li>Compute power: 1 EC2 Compute Unit</li></ul><p>\r\n\tAgain, it’s hard to make a direct comparison, but some of these figures are considerably higher than Heroku’s (1600 times the storage space!).</p><h5>Drawbacks</h5><ul>\r\n\t\r\n<li>You have to deploy your application yourself, either through Chef recipes, Capistrano, or manually.</li>\t\r\n<li>You have to administer the system yourself. EC2 has machine images of popular distros such as Ubuntu that are easily launched, but after that it’s up to you to keep it up to date and secure.</li>\t\r\n<li>Scaling horizontally (i.e. launching multiple app instances) is not as easy as with Heroku where it’s just a matter of moving a slider on their web interface. You’d better get familiar with Chef if you want to scale up and down frequently. This seems like a big drawback but in practice we rarely adjust the number of running instances for an app.</li>\t\r\n<li>AWS is more expensive for the basic offering. There is a free tier that will give you one free micro instance for the first year (only available when you first sign up) but this is not as generous as Heroku’s free, unlimited, single dyno apps.</li></ul><h3>Real life cost examples</h3><p>\r\n\tSay we have an app that needs 10MB database storage, one worker, and SSL. With Heroku this will break down to the following:</p><ul>\r\n\t\r\n<li>$20 for increased database storage. Heroku’s free shared database only offers 5MB storage. They are rolling out a new option but it’s unclear what the specs are.</li>\t\r\n<li>$20 for the <a title=\"SSL Endpoint\" href=\"https://addons.heroku.com/ssl\" target=\"_blank\">SSL endpoint</a>\r\n\t</li>\t\r\n<li>$35 for the worker process</li>\t\r\n<li>\r\n\t<strong>Total:</strong> $75 per month</li></ul><p>\r\n\tTo get the same thing on Amazon you’d pay the following:</p><ul>\r\n\t\r\n<li>$57.60 for an on-demand small EC2 instance (or $27.77 for a one year commitment; $17.69 for three years).</li></ul><p>\r\n\tAdmittedly it’s not a huge savings for the first month, but let’s say you need to add Redis and MongoDB. They both live mainly in memory, so it’s a good thing we went with the 1.7GB RAM on Amazon. We can easily run both of these services on our single small instance. On Heroku we’d need to add the following:</p><ul>\r\n\t\r\n<li>Redis To Go Small 100MB Instance &mdash; $25</li>\t\r\n<li>MongoLab Small 0.50GB Storage &mdash; $10</li></ul><p>\r\n\tWith Amazon it’s easy from a price perspective to add or remove services. If you go with Heroku, you may have to ask your client for an additional monthly payment for each service you add, making the decision more difficult and time consuming.</p><h3>Other considerations</h3><p>\r\n\tBesides costs, you will want to consider whether or not it’s even possible to run your application on Heroku before going that route. If you need to run custom binaries or compile from source, you will have to figure out how to hack Heroku, or you may be out of luck. If you need to store temporary files you should know that \r\n\t<a title=\"Ephemeral File System\" href=\"https://devcenter.heroku.com/articles/dyno-isolation#ephemeral_filesystem\" target=\"_blank\">Heroku’s ephemeral file system</a> does not make that task easy. You could end up exerting a lot of effort only to eventually run into a brick wall. Personally, I’ve had to <a title=\"Github issue\" href=\"https://github.com/customink/central_logger/pull/11\" target=\"_blank\">hack gems</a> and <a title=\"Ruby debug on Heroku\" href=\"http://stackoverflow.com/questions/6430419/run-ruby-debug-on-heroku\" target=\"_blank\">try</a> to find <a title=\"SO question\" href=\"http://stackoverflow.com/questions/6417475/rails-how-can-i-use-system-zip-on-heroku-to-make-a-docx-from-an-xml-template\" target=\"_blank\">workarounds</a> for many Heroku-specific issues.<br>\r\nOn the other hand, if you know your application will fit within the limitations, deployment on Heroku is a breeze. The web interface is beautiful, the CLI client works well for the most part (except it can’t manage multiple Heroku accounts), and it’s easy to add other services through add-ons. But if you think your app’s needs might grow in ways that won’t be satisfied by simple horizontal scaling, you should definitely consider AWS. Of course, you can always start with Heroku and later migrate to AWS, but in that case you will have to configure your app for two environments and spend the time to migrate everything.</p><h3>Other options?</h3><p>\r\n\tIn my experience, there are simply no other platforms that compare well with Heroku or AWS. There are some nice Heroku alternatives such as Dotcloud, but they suffer from coming after Heroku and thus having less integration with third-party products and less community support. Rackspace is the closest competitor to AWS, but it lacks the rich APIs and support that Amazon provides. Hopefully, we’ll see competitors catching up to Heroku and AWS and offering us more choices.</p><h3>Conclusion</h3><p>\r\n\tBoth Heroku and AWS are excellent platforms. They are quite different in some key areas. Understanding what each offers is essential to picking the right platform for your application. There is no clear winner here. Personally I like to use both. But my (simplified) mental test for which one to use is this: small app–Heroku; large app–Amazon. The winning platform is whichever one most helps you achieve your goals through keeping your developers happy and productive while remaining affordable enough to be sustainable.</p><p>\r\n\t<em>Editors note: Reed recently <a href=\"http://www.smashingboxes.com/heroku-vs-aws-revisited/\">revisited</a> the Heroku vs. AWS comparison.&nbsp;</em></p><p>\r\n\t<em><br>\r\n\t</em></p><p>\r\n\t<em style=\"background-color: initial;\">Smashing Boxes is a web and mobile app development company know for creating a lasting experience through bold design and disrupting the status quo. We are entrepreneurs and craftsmen first, and a digital creative agency second. Inspired by our visionary clients, we transform ideas into innovative web and mobile applications. </em><a href=\"http://smashingboxes.com/work\" style=\"background-color: initial;\">Take a look at our work.</a></p>",
  "slug": "heroku-vs-amazon-web-services",
  "slug_history": "--- []\n",
  "visits": 97926,
  "published": "2012-06-04T04:00:00+00:00",
  "authorName": "Reed Law",
  "category_id": 1,
  "image_uid": "2014/07/29/17/24/25/479/file",
  "created_at": "2014-06-05T18:25:19+00:00",
  "updated_at": "2014-08-13T21:02:02+00:00",
  "markdown": null,
  "image_alt_text": null,
  "featured": false,
  "database_id": 314,
  "category": {
    "type": "Entry",
    "id": "category_1"
  },
  "authors": [
    {
      "type": "employee",
      "id": "employee_18"
    },
    {
      "type": "employee",
      "id": "employee_18"
    }
  ]
}