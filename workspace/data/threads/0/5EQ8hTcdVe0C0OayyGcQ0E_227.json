{
  "id": "post_227",
  "title": "Beginner’s Guide to Test Driven Development (TDD)",
  "summary": "There are tons of articles online about the benefits of Test Driven Development, people who love it, people who “ain’t got time for that”, and people who don’t get it. I’m new to programming and I had the luxury of learning to program by letting tests drive my development.  This post is about learning TDD…",
  "body": "<p>There are tons of articles online about the benefits of <a href=\"http://en.wikipedia.org/wiki/Test-driven_development\">Test Driven Development</a>, <a href=\"http://agile.dzone.com/articles/why-i-love-test-driven\">people who love it,</a> <a href=\"https://medium.com/product-love/b230ebecee64\">people who “ain’t got time for that”</a>, and people who don’t get it. I’m new to programming and I had the luxury of learning to program by letting tests drive my development.  This post is about learning TDD as a beginner.</p><p>Three weeks into my <a href=\"https://practicingruby.com/articles/tdd-costs-and-benefits\">Ruby on Rails training</a> I was bombarded with TDD.  Initially overwhelmed, I wrote it off as another set of syntax to learn with no real benefits. What’s the point right? I’ll know if my code doesn’t work because, well...it won’t work.  I was required to use TDD in the beginning of my training and the more I used it, the more I understood and appreciated the benefits.</p><p>Maintaining focus.  You have a problem, you start to solve it, and before you know it you’re working on a totally different issue.  How do you know what you want to happen or when the problem is solved?  What do you want out of the code?  The tests will tell you!  These questions are the first ones you answer while writing your tests.  It forces you to plan first then write the code to make it do what you want later.  Baby steps is the name of the game when incrementally building solid code functionality. Write the tests that fail, do the simplest thing that works, and then move on to the next.  Programming this way really lets you focus on the creative part of the problem solving rather than getting caught up in trying to remember what you were doing.  TDD works as an outline to keep you focused and in your flow.</p><p><a href=\"http://sbblog.s3.amazonaws.com/wp-content/uploads/2014/02/tddmeme.jpg\"><img class=\"aligncenter size-full wp-image-4749\" alt=\"TDD meme\" src=\"http://sbblog.s3.amazonaws.com/wp-content/uploads/2014/02/tddmeme.jpg\" width=\"400\" height=\"299\"></a></p><p>The consumer of the software we build matters, right?  When you write tests you write them around exactly how the consumer will use the software, what you want them to experience, and what you want to happen.  The first thing you have to do is think about each step the consumer will take.  If you write strong tests, your code will be more solid, concise, and do what you want it to do.</p><p>The greatest gift TDD ever gave me was a deeper understanding of the <a href=\"http://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller\">MVC pattern</a>, which was a difficult concept for me to grasp as a new programmer; especially figuring out how they all work together and what each one is in charge of, I’m still learning!  It’s all part of the RED, GREEN, REFACTOR mantra.  When you write tests, you write them so that they will fail.  That failure will give you an error with clues about where in the program the problem is taking place.  Is it telling you it can’t find the ‘Submit’ button? Well then you know you probably want to check the view to see if you have it there.  It gives you a starting point to solve the problem, an immensely beneficial aspect when trying to fix a broken program.</p><p>New to TDD?  Here are a couple resources:</p><ul>\r\n<li>Ryan Bates’ Railscast, “<a href=\"http://railscasts.com/episodes/275-how-i-test\" style=\"background-color: initial;\">How I Test</a>”</li><li>Thoughtbot’s <a href=\"https://learn.thoughtbot.com/test-driven-rails-resources/matchers.pdf\" style=\"background-color: initial;\">RSpec Matchers Cheatsheet</a></li></ul><p><a href=\"https://learn.thoughtbot.com/test-driven-rails-resources/matchers.pdf\"></a></p><p>What is your experience with TDD? Comment below to let us know your thoughts or if you have any questions!</p><p><em style=\"background-color: initial;\">Smashing Boxes is a web and mobile app development company known for creating a lasting experience through bold design and disrupting the status quo. We are entrepreneurs and craftsmen first, and a digital creative agency second. Inspired by our visionary clients, we transform ideas into innovative web and mobile applications. </em><a href=\"http://smashingboxes.com/work\" style=\"background-color: initial;\">Take a look at our work.</a></p><p><em><a href=\"http://smashingboxes.com/work\" style=\"background-color: initial;\"></a>Cover photo by&nbsp;</em><a href=\"https://www.flickr.com/photos/imagesbywestfall/\" style=\"background-color: initial;\"><em>Greg Westfall</em></a></p>",
  "slug": "beginners-guide-to-test-driven-development-tdd",
  "slug_history": "--- []\n",
  "visits": 2048,
  "published": "2014-02-12T05:00:00+00:00",
  "authorName": "Lindsay Nauman",
  "category_id": 1,
  "image_uid": "2014/07/28/17/30/43/52/file",
  "created_at": "2014-06-05T18:21:14+00:00",
  "updated_at": "2014-08-08T21:22:40+00:00",
  "markdown": null,
  "image_alt_text": null,
  "featured": false,
  "database_id": 227,
  "category": {
    "type": "Entry",
    "id": "category_1"
  },
  "authors": [
    {
      "type": "employee",
      "id": "employee_7"
    },
    {
      "type": "employee",
      "id": "employee_7"
    }
  ]
}