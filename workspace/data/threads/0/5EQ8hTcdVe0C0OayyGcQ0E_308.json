{
  "id": "post_308",
  "title": "Audio.js",
  "summary": "The Problem: As a general rule, you don’t see event-based audio in the browser, or at least not outside of some embedded flash object or popup ad. Gone are the days when you’d hear that crisp IE “click” sound every time you clicked a link. No more do we jump for the volume controls when…",
  "body": "<h3>The Problem:</h3><p>As a general rule, you don’t see event-based audio in the browser, or at least not outside of some embedded flash object or popup ad. Gone are the days when you’d hear that crisp IE “click” sound every time you clicked a link. No more do we jump for the volume controls when we mistakenly navigate to a page with a MIDI rendition of “Eye of the Tiger” set to auto play in the background. Most sites don’t even set embedded videos to start automatically. You can see why the question of how best to implement it doesn’t come up very often.</p><p>A recent client project centered around gamifying the college entrance process called for event-driven audio in some of the interactive activities. This is one of the few contexts where I would argue audio events have a place. Music and sound effects play a big role in conveying information about the game state to the player. Still, building games in the browser with native code remains a touchy process, and the more browsers you try to support the touchier it gets. In this case, we wanted it all. Everything from iPad to IE8 had to provide the same interactive experience.</p><p>Normally the obvious option would be to throw one of the myriad Flash-based audio players on the page and be done with it, but the iPad can’t stomach Flash. Besides, we like to live on the bleeding edge here and I didn’t want to submit to the <code>&lt;embed&gt;</code> tag unless it was the only option.</p><p>The HTML5 <code>&lt;audio&gt;</code> element is still messy at best. Browser audio APIs are improving and moving towards a unified spec but the chart of compatible formats still reads like a pick-three of audio file extensions, with no two browsers picking the same three.</p><h3>What’s Out There:</h3><p>In doing research for this project I came across a lot of tutorials, snippets and plugins that claimed to allow you to use the <code>&lt;audio&gt;</code> tag with impunity. Almost all of these were built using multiple file formats for each audio file and a Flash fallback for older browsers. Most were also meant to be used for embedding songs, podcasts and the like. Of the ones I tested out, the simplest implementations didn’t provide a way to control the player programmatically and the more complex packages took a lot of configuration and had a lot of moving pieces.</p><p>The Flash fallback route was really the only option for supporting such a wide range of browsers but I wanted a middle-of-the-road solution that would bark on command but wouldn’t attempt to manage my entire MP3 collection for me. Enter <a href=\"http://kolber.github.com/audiojs/\" target=\"_blank\">audio.js</a>.</p><p>The audio.js package consists of four files:</p><ul>\r\n<li>audio.min.js</li><li>audiojs.swf</li><li>player-graphics.gif</li><li>index.css</li></ul><p>It’s lightweight to say the least and was the quickest to get up and running. It works by creating a JavaScript wrapper around the <code>&lt;audio&gt;</code> element that handles all browser discrepancies and allows you to use code like this:</p>\r\n<pre>&lt;audio src=\"/mp3/juicy.mp3\" preload=\"auto\" /&gt;</pre><p>For browsers without &lt;audio&gt; support of some kind, it defaults to the Flash player as expected, but the UI is all built with HTML and CSS and updated via JavaScript, so the user will see the same player no matter what their browser supports. Player appearance was admittedly not the biggest issue here since it would be hidden most of the time but it was one less thing to worry about.</p><p>What about browser support? The audio.js site claims</p><ul>\r\n<li>Mobile Safari&nbsp;(iOS 3+)</li><li>Android&nbsp;(2.2+, w/Flash)</li><li>Safari&nbsp;(4+)</li><li>Chrome&nbsp;(7+)</li><li>Firefox&nbsp;(3+, w/ Flash)</li><li>Opera&nbsp;(10+, w/ Flash)</li><li>IE&nbsp;(6, 7, 8, w/ Flash)</li></ul><p>An impressive list given the API fragmentation. Flash is listed as caveat more often than not but with JavaScript hooks to control the player instance I didn’t have to worry about what type of player&nbsp; was being loaded in order to play a file.</p><p>It was love on <code>$(document).ready()</code>. But that doesn’t mean we didn’t have our occasional fights. It took me a little while to get my head around the available methods because there is no detailed documentation available (however, the <a href=\"http://kolber.github.com/audiojs/docs/\" target=\"blank\">annotated source</a> is clean and concise). When testing in IE, I was plagued with an “Object doesn’t support this property or method” error for a while that had to do with how I was procedurally loading the audio files. A few hurdles, but nothing to put me off for good.</p><p>There may be better audio solutions out there but this is one of the simplest and most functional I’ve seen. It plays the audio by hook or by crook with minimal markup and access to player controls in JavaScript when needed. audio.js is definitely going in the resources folder for now.</p><p><em>Smashing Boxes is a web and mobile app development company know for creating a lasting experience through bold design and disrupting the status quo. We are entrepreneurs and craftsmen first, and a digital creative agency second. Inspired by our visionary clients, we transform ideas into innovative web and mobile applications. </em><a href=\"http://smashingboxes.com/work\">Take a look at our work.</a></p>",
  "slug": "cross-browser-event-driven-audio-a-lightweight-solution",
  "slug_history": "--- []\n",
  "visits": 3494,
  "published": "2012-08-10T04:00:00+00:00",
  "authorName": "Biko Tushinde",
  "category_id": 1,
  "image_uid": "2014/07/21/12/45/17/293/file",
  "created_at": "2014-06-05T18:25:07+00:00",
  "updated_at": "2014-07-31T20:31:09+00:00",
  "markdown": null,
  "image_alt_text": null,
  "featured": false,
  "database_id": 308,
  "category": {
    "type": "Entry",
    "id": "category_1"
  },
  "authors": [
    {
      "type": "employee",
      "id": "employee_22"
    },
    {
      "type": "employee",
      "id": "employee_22"
    }
  ]
}