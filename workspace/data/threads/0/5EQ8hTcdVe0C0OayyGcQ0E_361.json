{
  "id": "post_361",
  "title": "Merging Rails and Ember-CLI - Part I",
  "summary": "To say that Ember has grown over the past year would be an understatement. The Ember community has been exploding with awesome new tools to make developing and testing your Ember applications easier than ever. I am a Rails developer and when I first started working with Ember, the fastest way for me to get up and running was to use ember-rails and seriously tweak the asset pipeline. It wasn't all bad at first but as ember-cli started to become the de-facto standard for new Ember apps I felt myself getting left in the dust. Once I heard that ember-cli was going to become a first class citizen in Ember v2 I decided to quit dragging my feet and get on board with the new way to build Ember apps.",
  "body": "",
  "slug": "merging-rails-and-ember-cli",
  "slug_history": "---\n- drag-and-drop-ordering-with-rails-and-ember-cli\n",
  "visits": 12472,
  "published": "2015-06-26T00:00:00+00:00",
  "authorName": "Brandon Mathis",
  "category_id": 1,
  "image_uid": "2014/12/08/13/41/40/476/file",
  "created_at": "2014-12-02T17:24:35+00:00",
  "updated_at": "2015-07-14T19:40:21+00:00",
  "markdown": "## Why?\r\nTo say that Ember has grown over the past year would be an understatement. The Ember community has been exploding with\r\nawesome new tools to make developing and testing your Ember applications easier than ever. I am a Rails developer and when I first\r\nstarted working with Ember, the fastest way for me to get up and running was to use [ember-rails](https://github.com/emberjs/ember-rails)\r\nand seriously tweak my the asset pipeline. It wasn't all bad at first but as [ember-cli](http://www.ember-cli.com/) started\r\nto become the de-facto standard for new Ember apps I felt myself getting left in the dust. Once I heard that ember-cli was going\r\nto become a first class citizen in Ember v2 I decided to quit dragging my feet and get on board with the new way to build Ember apps\r\n\r\n## The App\r\nWhat I needed to build was an application where users could rank their favorite beers via a drag-and-drop ordering UI. Here is what I came up\r\nwith:\r\n\r\n![](http://f.cl.ly/items/1D2Q1y191W1o0C3V200s/Screen%20Recording%202014-11-10%20at%2010.27%20AM.gif)\r\n\r\nWhile not 100% fleshed out from a UX point of view this interface was surprisingly simple to implement. In the past I would of had to\r\nwrite a mountain of javascript just to get all the AJAX calls right. THEN I would go out and find some JQuery plugin, become an expert in it\r\nand click around in my element inspector for hours until everything was just right.\r\n\r\nNot anymore, I only used the following combination of tools  \r\n\r\n* Rails  \r\n* ember-cli  \r\n* HTML5 drag-and-drop  \r\n\r\n## Rails API\r\nThe Rails API was crazy simple. I used [active_model_serializers](https://github.com/rails-api/active_model_serializers)\r\nand just a handfull of rails-generated models.\r\n\r\n**Generate a new rails app w/o sprockets**  \r\n```sh\r\n$ rails new App --skip-sprockets\r\n$ cd App\r\n```\r\n\r\n**Update Gemfile**\r\n\r\n```ruby\r\nsource 'https://rubygems.org'\r\n\r\ngem 'rails', '4.1.6'\r\ngem 'sqlite3'\r\ngem 'active_model_serializers'\r\n```\r\n\r\n**Bundle Install**\r\n\r\n```sh\r\n$ bundle install\r\n```\r\n\r\nI'm not going to dive into the details of the API. If you want to see the models, routes, serializers, and controllers then\r\nyou can look at the [codebase here](https://github.com/smashingboxes/labs-AppTheKeg/tree/f8f152adee56569eb733e07ee344e8d8570b778d). If you have any\r\nquestions then please feel free to post them in the comments bellow. :)\r\n\r\nOnce you have your API built out, you should have the following 2 endpoints ready that your Ember app can talk to.\r\n```\r\nPUT    /api/v1/ballots/:ballot_id/swap/:li1/:li2(.:format)\r\nGET    /api/v1/ballots/:id(.:format)\r\n```\r\nAll we will be doing is getting a ballot and swapping the line_items on that ballot when we drag a beer over another beet. Super simple!\r\n\r\n\r\n## Ember\r\nNow the good stuff. Assuming you want to follow along, install node/npm and ember-cli on your machine\r\n```sh\r\n$ brew install node\r\n$ npm install -g ember-cli\r\n```\r\n\r\nNext we will generate our ember app.\r\n```sh\r\n$ ember new EmberApp\r\n```\r\n\r\nember-cli is going to go to work standing up the structure of a very basic ember app. It will also setup package managment\r\nwith [bower](http://bower.io/) and asset complication with [broccoli](https://github.com/broccolijs/broccoli). This will\r\nallow you to use ES6 module syntax, sass, handlebars, coffeescript, and other transpiles languages that you like.\r\n\r\nNow, startup your Ember app.\r\n```sh\r\n$ cd EmberApp\r\n$ ember server\r\n```\r\n\r\nYou should see this output\r\n\r\n![](http://cl.ly/image/0r1a1k1f1n31/Image%202014-11-10%20at%2011.27.07%20AM.png)\r\n\r\nAnd you will see the following @ `localhost:4200`\r\n\r\n![](http://cl.ly/image/2g3G222w110Y/Image%202014-11-10%20at%2011.27.47%20AM.png)\r\n\r\nNow, we will start writing Ember. I like to setup my adapter and generate my models first. For this\r\nblog post we will be using [ember-data](https://github.com/emberjs/data).\r\n\r\n```sh\r\n$ ember generate adapter application\r\n$ ember generate model Ballot\r\n$ ember generate model LineItem\r\n```\r\n\r\nUpdate your generated `EmberApp/app/adapters/application.js`. We will need to update our adaptor namespace to `/api/v1`. Then we need to tell Ember to use the ActiveModelAdapter. Ember, out of the box, knows how to communicate with a Rails app using ActiveRecordSerializers. We will also tell it the namespace of our api.\r\n\r\n```js\r\nimport DS from 'ember-data';\r\n\r\nexport default DS.ActiveModelAdapter.extend({\r\n  namespace: 'api/v1',\r\n});\r\n```\r\n\r\nNow open the generated `EmberApp/app/models/line-item.js` model to find a lot of ember-cli generated javascript!\r\nWe used to have to do all this tedious work to wire up our models by hand, but now ember-cli handles\r\nall this for us. All we need to do is define the attributes for a line item.\r\n\r\n```js\r\nimport DS from 'ember-data';\r\n\r\nexport default DS.Model.extend({\r\n  beer_name: DS.attr('string'),\r\n  weight: DS.attr('number'),\r\n  ballot: DS.belongsTo('ballot'),\r\n});\r\n```\r\n\r\nBallot will be a little bit different. We are going to use a computed property called `sorted_line_items` to sort the ballot's line-items\r\nby weight. This will be important since we want to be able to re-arrange the sorted list of beers. Open\r\n`EmberApp/app/models/ballot.js` and update the js with the following.\r\n\r\n```js\r\nimport DS from 'ember-data';\r\n\r\nexport default DS.Model.extend({\r\n  line_items: DS.hasMany('line_items'),\r\n\r\n  sorted_line_items: (function(){\r\n    return this.get('line_items').sortBy('weight');\r\n  }).property('line_items.@each.weight'),\r\n});\r\n```\r\n\r\nNext, generate a ballot controller and a line-item view. These don't need to be modified yet.\r\n```sh\r\n$ ember generate controller Ballot\r\n$ ember generate view LineItem\r\n```\r\n\r\nFinally, we will create an index route.\r\n```sh\r\n$ ember generate route index\r\n```\r\n\r\nThis will generate an `EmberApp/app/routes/index.js` route file and `index.hbs` handlebars template. We'll now go into these\r\nfiles and define what controller and model we will want to use.\r\n\r\n```js\r\nimport Ember from 'ember';\r\n\r\nexport default Ember.Route.extend({\r\n  controllerName: 'ballot',\r\n\r\n  model: function() {\r\n    return this.store.find('ballot', 1);\r\n  },\r\n\r\n  setupController: function(controller, model){\r\n    controller.set('model', model);\r\n  }\r\n});\r\n```\r\n\r\nThen we will define a simple view at `EmberApp/app/templates/index.hbs`.\r\n\r\n```handlebars\r\n<div class='container'>\r\n  <div class='container'>\r\n    <ol>\r\n      {{#each controller.model.sorted_line_items}}\r\n        <li>\r\n          {{beer_name}}\r\n        </li>\r\n      {{/each}}\r\n    </ul>\r\n  </div>\r\n</div>\r\n```\r\n\r\n##Rails\r\n\r\nThe Rails side of this application is pretty simple. A single controller, for getting ballots and a basic model structure that looks like this.\r\n\r\n```\r\n --------            ----------           ------\r\n|        |  1  0..* |          |  1    1 |      |\r\n| Ballot | <======= | LineItem | ======> | Beer |\r\n|        |          |  weight  |         | name |\r\n --------            ----------           ------\r\n```\r\n\r\nA little `rails generate` *magic* should get us pretty far.\r\n\r\n```sh\r\n$ rails g model Ballot\r\n$ rails g model Beer name:string\r\n$ rails g model LineItem ballot:references beer:references weight:integer\r\n```\r\n\r\nThen I just made a tiny ballot in my seeds that we can use to play with for this app\r\n\r\n**db/seeds.rb**\r\n\r\n```ruby\r\nBeer.delete_all\r\nBallot.delete_all\r\n\r\nb1 = Beer.create!(name: 'Goose Island IPA')\r\nb2 = Beer.create!(name: 'Dogfish Head 90 Min IPA')\r\nb3 = Beer.create!(name: 'Mother Earth Oatmeal Stout')\r\nb4 = Beer.create!(name: 'Raleigh Brewing Mocha Stout')\r\n\r\nBallot.create!(beers: [b1, b2, b3, b4], user_id: 1)\r\n```\r\n\r\nLastly, I created a BallotsController and route so that my Ember app has a ballot that it can grab from the Rails app.\r\n\r\n**app/controllers/api/v1/ballots_controller.rb**\r\n\r\n```ruby\r\nclass Api::V1::BallotsController < ApplicationController\r\n  respond_to :json\r\n\r\n  def show\r\n    render json: Ballot.first\r\n  end\r\nend\r\n```\r\n\r\n**app/serializers/ballot_serializer.rb**\r\n\r\n```ruby\r\nclass BallotSerializer < ActiveModel::Serializer\r\n  embed :ids, include: true\r\n  attributes :id\r\n  has_many :line_items, serializer: LineItemSerializer\r\nend\r\n```\r\n\r\n**config/routes.rb**\r\n\r\n```ruby\r\nRails.application.routes.draw do\r\n  namespace :api do\r\n    namespace :v1 do\r\n      resources :ballots\r\n    end\r\n  end\r\nend\r\n```\r\n\r\nOnce that is done, initialize a Rails server...\r\n\r\n```\r\n$ rails s\r\n```\r\n\r\n...and then initialize your Ember app via ember-cli but you will need to tell ember to talk to `localhost:3000` which *should* be where your rails app is hosted at.\r\n\r\n```\r\n$ ember server --proxy http://localhost:3000\r\n```\r\n\r\nOnce your ember server is up and running, point your browser to `localhost:4200` and you will see this. **Dont forget to seed your database!**\r\n![](http://cl.ly/image/1e1D0m0J161V/Image%202014-12-03%20at%209.53.45%20AM.png)\r\n\r\n##Resources\r\n\r\n* [App Repo](https://github.com/smashingboxes/blog-mergin_rails_ember_cli)\r\n* [ember-cli](http://www.ember-cli.com/)\r\n\r\n\r\n[In part two](http://smashingboxes.com/ideas/merging-rails-and-ember-cli-part-2), I'll go into detail about how I implemented HTML5 drag-n-drop functionality for updating beer rankings. I will demonstrate how simple it was to build this functionality into my existing, non-dynamic list of beers.",
  "image_alt_text": "",
  "featured": false,
  "database_id": 361,
  "category": {
    "type": "Entry",
    "id": "category_1"
  },
  "tags": [
    {
      "type": "tag",
      "id": "tag_1"
    },
    {
      "type": "tag",
      "id": "tag_2"
    },
    {
      "type": "tag",
      "id": "tag_1"
    },
    {
      "type": "tag",
      "id": "tag_2"
    }
  ],
  "authors": [
    {
      "type": "employee",
      "id": "employee_69"
    },
    {
      "type": "employee",
      "id": "employee_69"
    }
  ]
}