{
  "id": "post_325",
  "Title": "Using GitHub Issues to Manage Projects",
  "Summary": "Here at Smashing Boxes, we have tried nearly every project management tool under the sun. Basecamp, Pivotal Tracker, Kanbanpad, Trajectory, Google Docs, the list continues on. None of them seem to stick. The designers don’t want to use one tool, the developers can’t make sense of how the other is organized, etc. ",
  "Body": "<p>GitHub has a built-in issue tracker that can be turned on or off per repository. It’s fairly easy to use. So for a couple of active projects, our developers decided to exclusively use GitHub issues to track to-do items. We would gather our tasks based on a requirements document in Google Drive and add them as issues within GitHub. We would assign ourselves to the issue if it was something we were currently working on or something we could do quicker than anyone else. And when we pushed a commit, we could close the issue from the commit message. GitHub has a <a href=\"https://github.com/blog/831-issues-2-0-the-next-generation\" style=\"background-color: initial;\">nice writeup</a> on what all you can do with their issue management.</p><p>After using the issues to manage tasks on those guinea pig projects, we made a few discoveries. For starters, we worked more efficiently in handling basic task management. Before using GitHub Issues, we would gather requirements from a Google document, Basecamp Project, and / or a Pivotal Tracker project. Once we completed the task and deployed to a staging environment for review, we would have to navigate to that task in the project management system of the week&trade; and check it off. We gained time when not having to deal with other systems.</p><p>Another great feature is collaboration. We were able to comment on issues and get feedback for the tasks we were working on. We could even comment on commits down to a specific line of code. We would then be notified within GitHub (and email) about collaboration happening on different issues.</p><p>The last great discovery came with getting the designers on board. They may not use it to the extent that the developers do, but they know enough now that when they come across a bug on the site, they can add an issue. Designers were happy. Developers were happy. Projects started progressing much smoother.</p><p>Going forward, our team will continue to use GitHub issues. We have labels for tasks “On Hold” and “Needing Feedback” so that he can quickly organize and manage each project. GitHub issues scratches our immediate project management itches, and we will continue to rock this way in the foreseeable future.</p><p><em>Check out our open source projects on&nbsp;</em><a href=\"https://github.com/smashingboxes\">GitHub</a>.&nbsp;</p><p>Cover photo by&nbsp;<a href=\"https://www.flickr.com/photos/toolmantim/\" style=\"background-color: initial;\">Tim Lucas</a></p>",
  "Slug": "using-github-issues-to-manage-projects",
  "slug_history": "--- []\n",
  "visits": 7884,
  "Published": "2012-02-14T10:00:00+00:00",
  "Authorname": "Vimal Patel ",
  "category_id": 1,
  "image_uid": "2014/07/29/17/23/39/318/file",
  "created_at": "2014-06-05T18:25:46+00:00",
  "updated_at": "2014-12-18T22:50:46+00:00",
  "markdown": "",
  "image_alt_text": null,
  "featured": false,
  "database_id": 325,
  "category": {
    "type": "Entry",
    "id": "category_1"
  }
}