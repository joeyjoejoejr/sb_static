{
  "id": "post_247",
  "Title": "Scalable CSS",
  "Summary": "“Easy to make larger, more powerful, etc” – Merriam-Webster Dictionary When I first started making websites, one of my most enjoyable steps in development was creating the visuals. The visuals make the site come alive by giving it a personality and an identity. Who doesn’t like something that’s pretty? CSS is what adds the visual…",
  "Body": "<p dir=\"ltr\">\r\n\t<em>“Easy to make larger, more powerful, etc”</em></p><p dir=\"ltr\">\r\n\t<em>- Merriam-Webster Dictionary</em></p><p dir=\"ltr\">\r\n\tWhen I first started making websites, one of my most enjoyable steps in development was creating the visuals. The visuals make the site come alive by giving it a personality and an identity. Who doesn’t like something that’s pretty? CSS is what adds the visual layer to a website. Without CSS the website would look boring. Compare this \r\n\t<a href=\"https://academic.cuesta.edu/acasupp/DSPS/curbcut/test.htm\">page</a> without CSS to this <a href=\"http://24ways.org/\">page</a> with CSS. There is a huge difference.</p><p dir=\"ltr\">\r\n\tCSS is easy to learn, but difficult to master. The syntax is very easy to understand and the properties make sense. If you want a box with a blue background you type:</p>\r\n<pre>#box { background:blue  }\r\n</pre><p dir=\"ltr\">\r\n\tEasy peasy. Now you have a box with a blue background.</p><p dir=\"ltr\">\r\n\tCSS for easy basic designs is simple and pretty straightforward. CSS for complex designs is not simple. Catching a football is pretty easy if one is thrown at you. Catching multiple footballs is where it gets tough.</p><p dir=\"ltr\">\r\n\tThis is where Scalable CSS comes into play. You want your code to be easily managed and maintained, even if the site gets larger and more complex. I like to separate my CSS files like so:</p><ol>\r\n\t\r\n<li dir=\"ltr\">\r\n\t\r\n<p dir=\"ltr\">\r\n\t\tBasic Infrastructure\r\n\t</p></li>\t\r\n<li dir=\"ltr\">\r\n\t\r\n<p dir=\"ltr\">\r\n\t\tLayout\r\n\t</p></li>\t\r\n<li dir=\"ltr\">\r\n\t\r\n<p dir=\"ltr\">\r\n\t\tComponents\r\n\t</p></li>\t\r\n<li dir=\"ltr\">\r\n\t\r\n<p dir=\"ltr\">\r\n\t\tComponent States\r\n\t</p></li></ol><p dir=\"ltr\">\r\n\tTypically I import these styles into my Basic Infrastructure CSS file in development. When in deployment you can minify each and put them into a single CSS file.</p><p dir=\"ltr\">\r\n\tKeep in mind that each project is different but generally all projects have the same CSS foundations.</p><h3 dir=\"ltr\">\r\n\tBasic Infrastructure\r\n</h3><p dir=\"ltr\">\r\n\tThis is where we set the basic infrastructure for the site. Normally, these are single and pseudo element selectors that set the general style for the whole site. Typical elements and styling here would be setting the link colors, the heading font sizes, or the paragraph line height. Here is an example:</p>\r\n<pre>a { text-decoration: none; color: blue }\r\nh1 { font-size: 2em; color: blue }\r\nh2 { font-size: 1.5em; color: lightblue }\r\np { line-height: 3px }\r\n</pre><p dir=\"ltr\">\r\n\tYou could also reset styles here.</p><h3 dir=\"ltr\">\r\n\tLayout\r\n</h3><p dir=\"ltr\">\r\n\tHere we set the layout styles. This is pretty straightforward and work can be minimal if we use frameworks such as \r\n\t<a href=\"http://getbootstrap.com/\">Bootstrap</a> or <a href=\"http://foundation.zurb.com/\">Foundation</a>. Layout styles are basically the header, the sidebar, and the content. I like to think of the layout styles similar to a wireframe. The layout styles dictate the components.</p><p style=\"text-align: center;\">\r\n\t<img alt=\"\" src=\"https://lh3.googleusercontent.com/QHZNI9XJaaSB0iktS7og-RMYGNyOWSQoE71lCn62Foz8_GDmZKjX-DOCy_wrgL_kT6HVyvEYhAKbf-apM97fHmCQLCvLevZ9fGWswEmbElO8Oe1oRLehyD7cuw\" width=\"624px;\" height=\"491px;\"></p><h3 dir=\"ltr\">\r\n\tComponents\r\n</h3><p dir=\"ltr\">\r\n\tComponents are the elements that live inside the layout blocks. Examples of these are the navigational menu that lives inside the header, the Twitter feed that lives in the sidebar, and the website info that lives inside the footer. Be careful of what you name your classes as these styles can be the most hefty.</p><h3 dir=\"ltr\">\r\n\tComponent States\r\n</h3><p dir=\"ltr\">\r\n\tA component might have different states. A menu might have an expanded state or a hidden state. These can go in the components stylesheet or you can have a separate one to keep organization. Here is an example of component states</p><p dir=\"ltr\"></p>\r\n<pre>.nav li.hidden { display: none;}\r\n.nav li.expanded { display: block; }\r\n</pre><p dir=\"ltr\">\r\n\t<strong>Extra Jazz To Help Organization</strong></p><h3 dir=\"ltr\">\r\n\tSASS\r\n</h3><p dir=\"ltr\">\r\n\tIf you aren’t using SASS already, you should be. Quoted from the \r\n\t<a href=\"http://sass-lang.com/\">SASS website</a> as “CSS with superpowers” SASS has many useful features that help the with organization. One such feature is nested selectors. This makes stylesheets shorter. However be careful not to nest too deep as this can cause confusion and conflicts. Here is an example of SASS modified from the example above:</p>\r\n<pre>.nav {\r\n  li.hidden {\r\n     display: none;\r\n  }\r\n}\r\n.nav {\r\n  li.expanded {\r\n    display: block;\r\n  }\r\n}\r\n</pre><h3 dir=\"ltr\">\r\n\tFrameworks\r\n</h3><p dir=\"ltr\">\r\n\tA Web Framework is great as it does the heavy lifting for you. Frameworks take care of the Basic Infrastructure, Layout, Components, and Component states, leaving you with very little to no CSS markup. Here are a few great frameworks:</p><p dir=\"ltr\">\r\n\t<a href=\"http://getbootstrap.com/\">Bootstrap</a> (of course)</p><p dir=\"ltr\">\r\n\t<a href=\"http://foundation.zurb.com/\">Zurb Foundation</a></p><p dir=\"ltr\">\r\n\t<a href=\"http://neat.bourbon.io/\">Bourbon Neat</a></p><h3 dir=\"ltr\">\r\n\tConclusion\r\n</h3><p dir=\"ltr\">\r\n\tSeparation of CSS files is very helpful for maintaining a larger site. Separation based on like elements helps if someone else has to go into my code to make changes. I try to stick to the same patterns every time I code in case upkeep is not done by me. All in all this is my approach to make my CSS Scalable. It works for me and hopefully it works for you. Feel free to discuss your approaches in the comments.</p><p dir=\"ltr\"></p><p><em>Smashing Boxes is a web and mobile app development company know for creating a lasting experience through bold design and disrupting the status quo. We are entrepreneurs and craftsmen first, and a digital creative agency second. Inspired by our visionary clients, we transform ideas into innovative web and mobile applications. </em><a href=\"http://smashingboxes.com/work\">Take a look at our work.</a></p>",
  "Slug": "scalable-css",
  "slug_history": "--- []\n",
  "visits": 1605,
  "Published": "2013-11-12T05:00:00+00:00",
  "Authorname": "Kenneth Ashley",
  "category_id": 1,
  "image_uid": "2014/07/29/12/07/57/229/file",
  "created_at": "2014-06-05T18:21:52+00:00",
  "updated_at": "2014-07-31T20:04:48+00:00",
  "markdown": null,
  "image_alt_text": null,
  "featured": false,
  "database_id": 247,
  "category": {
    "type": "Entry",
    "id": "category_1"
  }
}