{
  "id": "post_215",
  "Title": "Apple’s Swift: A Developer’s First Impression",
  "Summary": "Our developers Jordan Clifton and David Sweetman dove into the new programming language, “Swift,” that was announced yesterday during Apple’s keynote at WWDC14. After hearing the announcement and viewing the demo we were excited to jump in and start learning more about Swift using the Playground. Playgrounds are used to experiment with new technologies, analyze problems,…",
  "Body": "<p dir=\"ltr\">Our developers Jordan Clifton and David Sweetman dove into the new programming language, “<a href=\"https://developer.apple.com/swift/\">Swift</a>,” that&nbsp;was announced yesterday during Apple’s keynote at <a href=\"https://developer.apple.com/wwdc/\">WWDC14</a>. After hearing the announcement and viewing the demo we were excited to jump in and start learning more about Swift using the <a href=\"https://developer.apple.com/library/prerelease/ios/recipes/xcode_help-source_editor/ExploringandEvaluatingSwiftCodeinaPlayground/ExploringandEvaluatingSwiftCodeinaPlayground.html#//apple_ref/doc/uid/TP40009975-CH26\">Playground</a>. Playgrounds are used to experiment with new technologies, analyze problems, and prototype user interfaces.</p><p id=\"attachment_5268\" style=\"width: 327px\" class=\"wp-caption aligncenter\">\r\n<a href=\"http://sbblog.s3.amazonaws.com/wp-content/uploads/2014/06/IMG_15381.jpg\"><img class=\"wp-image-5268  \" alt=\"Developers watching WWDC14\" src=\"http://sbblog.s3.amazonaws.com/wp-content/uploads/2014/06/IMG_15381.jpg\" width=\"317\" height=\"423\"></a></p><p class=\"wp-caption-text\" style=\"text-align: center;\">Developers watching WWDC14 in the new office.</p><p>Swift uses the same runtime as Objective-C under the hood, and also uses <a href=\"http://www.google.com/url?q=http%3A%2F%2Fen.wikipedia.org%2Fwiki%2FAutomatic_Reference_Counting&amp;sa=D&amp;sntz=1&amp;usg=AFQjCNHaQBd32glc8dP7HSzlvW1RhjInQA\">Automatic Reference Counting (ARC)</a>; in fact, in the book “The Swift Programming Language,” Apple suggests that a major motivation of ARC was to pave the way for Swift. Swift also offers seamless access to existing Cocoa frameworks and is fully interoperable with existing Objective-C code.</p><p>Here are some comparisons between equivalent operations in Objective-C and Swift:</p><p><strong>Array initialization:</strong></p><p dir=\"ltr\">Objective-C</p>\r\n<pre class=\"brush: objc; title: ; notranslate\" title=\"\"> NSArray *myArray = [[NSArray alloc] init]; </pre><p dir=\"ltr\">Swift</p>\r\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">let myArray = String[]() </pre><p dir=\"ltr\">Both lines of code create an empty array using the initializer syntax.</p><p dir=\"ltr\"><strong>Creating an array with items also looks quite different:</strong></p><p dir=\"ltr\">Objective-C</p>\r\n<pre class=\"brush: objc; title: ; notranslate\" title=\"\"> NSArray *myArray = [[NSArray alloc] initWithObjects:@\"one\", @\"two\", @\"three\", nil]; </pre><p dir=\"ltr\">Swift</p>\r\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\"> var myArray = [\"one\", \"two\", \"three\"] </pre><p dir=\"ltr\">Another exciting element of Swift is how clean and easy it is to read the syntax. This allows developers to produce more maintainable code while having fun doing so.&nbsp;Additionally, Swift includes a for-in loop that makes it easy to iterate over arrays, dictionaries, ranges, strings, and other sequences. The loop can use exclusive and inclusive ranges, and parentheses are optional. Traditional for loops are also available to use as well.</p><p dir=\"ltr\"><strong>Using the for-in loop in Swift would look something like this:</strong></p>\r\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">for index in 1...5 {\r\n   println(\"index: \\(index)\")\r\n} </pre><p dir=\"ltr\">This will loop through numbers 1-5 printing what the current index is. This syntax is another way Swift has successfully increased readability making it very easy to understand what the code does. At first glance, Swift seems to bring a nice mix of syntax and features to Apple development that will likely help write concise code and express instructions in ways that that were not previously possible.</p><p dir=\"ltr\">One of the most exciting parts of Swift is its functions and methods. In Swift, functions are first-class types. Compare that to Objective-C, where you have methods which must belong to a class. If you want to create a function outside of a class in Objective-C, you have to use C functions or blocks.</p><p dir=\"ltr\"><strong>The below example demonstrates a class that defines a simple class/type method to add two integers. Notice that Swift obviates the need for a separate interface:</strong></p><p dir=\"ltr\">Objective-C</p>\r\n<pre class=\"brush: objc; title: ; notranslate\" title=\"\">@interface MyClass : NSObject\r\n+ (INT) addValue:(INT)value1 toValue:(INT)value2;\r\n@end\r\n\r\n@implementation MyClass\r\n+ (INT) addValue:(INT)value1 toValue:(INT)value2 {\r\n   return value1 + value2;\r\n}\r\n@end </pre><p dir=\"ltr\">Swift</p>\r\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">class MyClass : NSObject {\r\n   class func addValue(value: INT, toValue: INT) -&gt; INT {\r\n      return value + toValue\r\n   }\r\n} </pre><p dir=\"ltr\"><strong>The above demonstrates basic Swift function syntax:</strong></p>\r\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">func functionName(firstArgName: arg-type, secondArgName: arg-type) -&gt; return-type {\r\n   // code block\r\n} </pre><p dir=\"ltr\"><strong>The Swift type method in the MyClass declaration above would be called like this:</strong></p>\r\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">var value = MyClass.addValue(5, toValue:4)\r\n// value = 9 </pre><p dir=\"ltr\">Calling the method highlights an interesting naming idiom suggested by Apple: in methods, the first parameter is not assigned an external name automatically, but subsequent parameters are, so we pass it the parameters as `5, toValue:4`. `toValue` is the external name of the second argument, and is included for clarity, to give the same readability that Objective-C does by interspersing arguments in the method name. The first parameter “5″ does not need an external name, because the method name itself sufficiently describes the first variable.</p><p dir=\"ltr\">It looks like things will get pretty fun with functions in Swift: currying, variadic arguments, multiple return values. Definitely take a look at the “<a href=\"https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Functions.html#//apple_ref/doc/uid/TP40014097-CH10-XID_204\">Functions</a>” and “<a href=\"https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Methods.html#//apple_ref/doc/uid/TP40014097-CH15-XID_300\">Methods</a>” sections of the <a href=\"https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/Swift_Programming_Language/index.html#//apple_ref/doc/uid/TP40014097\">Swift Programming Guide</a> to learn more of the details.</p><p dir=\"ltr\">This article is simply a brief look at how Swift might change the face of iOS development. So, if you're a beginner&nbsp;should you still learn Objective-C? Our thoughts&nbsp;<a href=\"http://smashingboxes.com/_/984db\">here</a>.&nbsp;</p><p dir=\"ltr\"></p><p dir=\"ltr\"></p>",
  "Slug": "apples-swift-a-developers-first-impression",
  "slug_history": "--- []\n",
  "visits": 14968,
  "Published": "2014-06-03T08:00:00+00:00",
  "Authorname": "Jordan Clifton",
  "category_id": 4,
  "image_uid": "2014/07/31/12/27/59/59/file",
  "created_at": "2014-06-05T18:20:52+00:00",
  "updated_at": "2014-12-18T23:23:03+00:00",
  "markdown": "",
  "image_alt_text": null,
  "featured": false,
  "database_id": 215,
  "category": {
    "type": "Entry",
    "id": "category_4"
  },
  "tags": [
    {
      "type": "tag",
      "id": "tag_3"
    }
  ]
}