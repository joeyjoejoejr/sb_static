{
  "id": "post_359",
  "Title": "Embed One equivalent for ActiveRecord Models",
  "Summary": "Learn how to use hash serialization and metaprogramming to clean up your active record models.",
  "Body": "<p>\r\n\tSoftware architects in object&nbsp;oriented languages are asked to think about concepts and how these concepts or objects relate to each other. With SQL databases and more specifically ActiveRecord, you might sometimes have trouble with how to express this relation, especially when the related object has no meaning on its own.&nbsp;</p><p>\r\n\tAs an example, let's think of a User which has an Address. This address is itself composed of a postal_code, state, country, etc. Let's look at four alternative solutions:</p><p>\r\n\t<strong>Delegate</strong></p>\r\n<pre>has_one :address\r\n\r\ndelegate :postal_code, :state, :country, :city, :address_line1, to: :address\r\n</pre><p>\r\n\tJust like other attributes of the User model such as name, the<em> address really has no value on its own</em>. It doesn't really make sense to have a Name model, neither does it make sense to have an Address model.</p><p>\r\n\t<strong>Large db&nbsp;table</strong></p><p>\r\n\tOne simple idea would be to have every address attribute be a column on the user table: address_zip, address_country, address_city...&nbsp;</p><p>\r\n\tThis is really not optimal. In the case where some of these fields are optional, <em>we'd have lots of nil values in our database</em>.</p><p>\r\n\t<strong>Serialize</strong></p><p>\r\n\tIn the world of MongoDB and other noSQL databases there is the concept of embedded data (for example Mongoid's <a href=\"http://mongoid.org/en/mongoid/v3/relations.html#embeds_one\">embed_one</a> function). The developer can chose which data they'd like to reference and which they'd like to have embedded.&nbsp;</p><p>\r\n\tRails comes with a nifty&nbsp;<a href=\"http://apidock.com/rails/ActiveRecord/AttributeMethods/Serialization/ClassMethods/serialize\">serialize</a> method that is meant to do just this. To use it all we need is an address&nbsp;<strong>text</strong> column in the database (Alternatively we can also use Postgres' Hstore if we'd like to search the embedded fields).&nbsp;</p><p>\r\n\tLet's give this a try:</p>\r\n<pre>serialize :address, Hash\r\n\r\nvalidates :postal_code, presence: true\r\n\r\ndef postal_code\r\n  address[:postal_code]\r\nend\r\ndef postal_code=(value)\r\n  address[:postal_code] = value\r\nend\r\n</pre><p>\r\n\tThat's great but if we are to write every field like this, <em>our models will be very crowded</em>.</p><p>\r\n\t<strong>Metaprogrammed Serialize</strong></p><p>\r\n\tWhat we'd really want is to write something like:</p>\r\n<pre>attr_embedded :address, [:postal_code, :state, :country, :city, :address_line1]\r\nattr_embedded :social_urls, [:facebook_url, :linkedin_url, :twitter_url]\r\n\r\nvalidates :postal_code, presence: true\r\n</pre><p>\r\n\tWith a little bit of&nbsp;<a href=\"http://ruby-metaprogramming.rubylearning.com/\">metaprogramming</a> magic we can get there. You can use the file below in your lib folder and you are done.</p>\r\n<pre>module EmbeddedAttrAccessible\r\n  extend ActiveSupport::Concern\r\n  module ClassMethods\r\n    def attr_embedded(real_attr, virtual_attrs)\r\n      serialize real_attr, Hash\r\n      virtual_attrs.each do |field|\r\n        define_method field do\r\n          read_attribute(real_attr)[field]\r\n        end\r\n        define_method \"#{field}=\" do |value|\r\n          read_attribute(real_attr)[field] = value\r\n        end\r\n      end\r\n    end\r\n  end\r\nend\r\nActiveRecord::Base.send :include, EmbeddedAttrAccessible\r\n</pre><p>\r\n\tNow we can use our embedded fields just as we would any other field in our model. Want to see more like this? We dabble on&nbsp;<a href=\"https://github.com/smashingboxes\">GitHub</a>.</p>",
  "Slug": "embed-one-for-activerecord-models",
  "slug_history": "---\n- embed-one-for-active-record\n- embed-one-for-sql-databases\n",
  "visits": 634,
  "Published": null,
  "Authorname": "Michael Elfassy",
  "category_id": 1,
  "image_uid": "2014/11/14/14/09/30/569/file",
  "created_at": "2014-11-13T16:07:18+00:00",
  "updated_at": "2014-12-03T16:05:08+00:00",
  "markdown": null,
  "image_alt_text": null,
  "featured": false,
  "database_id": 359,
  "category": {
    "type": "Entry",
    "id": "category_1"
  },
  "tags": [
    {
      "type": "tag",
      "id": "tag_2"
    }
  ]
}