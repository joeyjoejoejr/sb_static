{
  "id": "post_245",
  "Title": "Image Preview with Dragonfly Gem",
  "Summary": "The Dragonfly gem is a really efficient way for a rails project to support on the fly image resizing and processing. If you haven’t given it a try yet, I highly recommend you do. Today I will be looking into how to show a nice preview image. Image preview are important because they allow the user…",
  "Body": "<p dir=\"ltr\">\r\n\tThe \r\n\t<a href=\"https://github.com/markevans/dragonfly\">Dragonfly gem</a> is a really efficient way for a rails project to support on the fly image resizing and processing. If you haven’t given it a try yet, I highly recommend you do.&nbsp;Today I will be looking into how to show a nice preview image. Image preview are important because they allow the user to confirm the file they selected as well as show how the image will be cropped.</p><p dir=\"ltr\">\r\n\tGOAL:</p><p dir=\"ltr\">\r\n\t<img class=\"aligncenter\" alt=\"\" src=\"https://lh6.googleusercontent.com/eOIs_e140cI6-kU175WS3NKLxON9ayoPy572cWuUz0pXG7r_Ojubo3qdaoJtC6DrbVZr_N1mbFCKZ9mujcCRj8-F9568ipXKRhHDuBL5QuoIoRFn-C6M1Md1xg\" width=\"373px;\" height=\"104px;\"></p><p dir=\"ltr\">\r\n\tThe usual way to do this is via Ajax. A great example of this can be found by the good people at \r\n\t<a href=\"http://zurb.com/playground/ajax-upload\">Zurb</a>.&nbsp;There are many problems with the Ajax solution. Namely, what happens when the form’s validations fail (bad email, etc&hellip;). Ideally you should still be able to see the image you uploaded without having to re-upload it!&nbsp;Moreover, sometime the user will not complete the form successfully. In this case the image he uploaded should be removed.&nbsp;This is where Drangonfly comes to the rescue!&nbsp;Say you have a profile image on your user model. You would need to create a profile_image_uid column in the database. Dragonfly would then provide you with a `\r\n\t<span style=\"line-height: 1.6em; color: rgb(153, 51, 102); background-color: initial;\">retained_profile_image</span>` form helper to remember the image in case of validation errors.&nbsp;The solution goes as follows:</p><p dir=\"ltr\">\r\n\t1) Create an iframe containing only the file input tag</p><p dir=\"ltr\">\r\n\t<a href=\"http://sbblog.s3.amazonaws.com/wp-content/uploads/2013/11/iframe-example.png\"><img class=\"aligncenter\" alt=\"iframe example\" src=\"http://sbblog.s3.amazonaws.com/wp-content/uploads/2013/11/iframe-example.png\" width=\"373\" height=\"104\"></a></p><p dir=\"ltr\">\r\n\t2) When this input changes (when the user selects a file) automatically upload it to the server (right away! ie: don’t wait for the form to submit)</p><p dir=\"ltr\">\r\n\t3) Reload the iframe with javascript which will change the \r\n\t<span style=\"color: #993366;\">retained_profile_image </span>value (as if the form had been submitted with an error) and show the image</p><p dir=\"ltr\">\r\n\tNow when the form is submitted, Dragonfly will use the value in \r\n\t<span style=\"color: #993366;\">retained_profile_image</span> to get the image without having to re-upload it!&nbsp;If the form fails, the retained_profile_image will stay. If the user leaves the page (or uploads another image), Dragonfly will automatically remove the temp image!</p><p dir=\"ltr\">\r\n\tHere is the code:</p><pre>def preview\r\n   if params[:image].present?\r\n     app = Dragonfly[:images]\r\n     uid = app.store(params[:image].tempfile)\r\n     @image = app.fetch(uid)\r\n     @retained_image = Dragonfly::Serializer.json_encode(uid: @image.uid) if @image\r\n   end\r\n   render layout: false\r\nend\r\n</pre><p dir=\"ltr\"></p><pre>&lt;%= form_tag image_preview_path, multipart: true, id: \"image_preview_form\" do %&gt;\r\n   &lt;%= file_field_tag :image %&gt; \r\n&lt;% end %&gt;  \r\n\r\n\r\n&lt;script&gt;\r\n   //automatically submit the form\r\n   document.getElementById(\"image\").onchange = function() {\r\n       document.getElementById(\"image_preview_form\").submit();\r\n   };      \r\n\r\n\r\n&lt;% if @image %&gt;\r\n     //update the retained image field\r\n     window.parent.document.getElementById(\"user_retained_profile_image\").value = \"&lt;%= @retained_image %&gt;\"\r\n     window.parent.document.getElementById(\"user_photo\").src = \"&lt;%= @image.thumb('145x145#').url %&gt;\"\r\n   &lt;% end %&gt; \r\n&lt;/script&gt; </pre><pre>&lt;%= simple_form_for @user, ... %&gt;\r\n\r\n  &lt;div&gt;\r\n    &lt;label&gt; Upload a photo &lt;/label&gt;\r\n\r\n    &lt;iframe width=\"600\" height=\"50\" frameborder=\"0\" src=”&lt;%= image_preview_path %&gt;” /&gt;\r\n\r\n    &lt;% if f.object.profile_image.present? %&gt;\r\n      &lt;%= image_tag f.object.profile_image.thumb('145x145#').url, class: 'user_photo' %&gt;\r\n      &lt;%= f.input_field :remove_profile_image %&gt;\r\n    &lt;% else %&gt;\r\n      &lt;%= image_tag 'default.png', size: '145x145', class: 'user_photo' %&gt;\r\n    &lt;% end %&gt;\r\n\r\n    &lt;%= f.input_field :retained_profile_image, as: :hidden %&gt;\r\n  &lt;/div&gt;\r\n\r\n&lt;% end %&gt;</pre>\r\n<pre>get 'image_preview', to: \"image#preview\"\r\npost 'image_preview', to: \"image#preview\"</pre><p dir=\"ltr\">\r\n\tOf course this code can be improved, for instance to show the upload progress to the user.&nbsp;For those using simple_form, I’ve \r\n\t<strong style=\"background-color: initial;\"><a href=\"https://github.com/elfassy/simple_dragonfly_preview\">turned this code into a gem</a></strong>.&nbsp;Have you ever used the Dragonfly gem? Feel free to ask any questions or share your experiences with image preview in the comments.</p><p dir=\"ltr\"></p><p><em>Smashing Boxes is a web and mobile app development company know for creating a lasting experience through bold design and disrupting the status quo. We are entrepreneurs and craftsmen first, and a digital creative agency second. Inspired by our visionary clients, we transform ideas into innovative web and mobile applications. </em><a href=\"http://smashingboxes.com/work\">Take a look at our work</a>.</p>",
  "Slug": "image-preview-with-dragonfly-gem",
  "slug_history": "--- []\n",
  "visits": 1588,
  "Published": "2013-11-19T05:00:00+00:00",
  "Authorname": "Michael Elfassy",
  "category_id": 1,
  "image_uid": "2014/07/21/12/55/25/754/file",
  "created_at": "2014-06-05T18:21:47+00:00",
  "updated_at": "2014-08-01T15:09:45+00:00",
  "markdown": null,
  "image_alt_text": null,
  "featured": false,
  "database_id": 245,
  "category": {
    "type": "Entry",
    "id": "category_1"
  }
}