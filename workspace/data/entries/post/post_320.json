{
  "id": "post_320",
  "Title": "Plain Old Ruby Object for App Settings",
  "Summary": "Need to have app-wide settings for your Rails app? No need for fancy gems, just use a PORO (plain old ruby object) Put this in...",
  "Body": "<p>\r\n\tNeed to have app-wide settings for your Rails app? No need for fancy gems, just use a PORO (plain old ruby object)</p><p>\r\n\tPut this in:\r\n\t<br>\r\n\t<code>config/initializers/settings.rb</code></p>\r\n<pre class=\"raw\">class Settings\r\n  def self.method_missing(sym, *args, &amp;block)\r\n    return false\r\n  end\r\n  def self.reload\r\n    raw_config = File.read(\"#{::Rails.root.to_s}/config/settings.yml\")\r\n    erb_config = ERB.new(raw_config).result\r\n    settings = YAML.load(erb_config)[::Rails.env]\r\n    if settings\r\n      settings.each { |name, value|\r\n        instance_variable_set(\"@#{name}\", value)\r\n        self.class.class_eval { attr_reader name.intern }\r\n      }\r\n    end\r\n  end\r\n  reload\r\nend\r\n</pre><p>\r\n\tThen create a file:\r\n\t<br>\r\n\t<code>config/settings.yml</code></p>\r\n<pre class=\"raw\">defaults: &amp;defaults\r\n  mailgun_api_url: <a href=\"&lt;a href=\" https:=\"\" api:your_key@api.mailgun.net=\"\" v2=\"\" amp.mailgun.org=\"\" messages\"=\"\"></a><a href=\"https://api:your_key@api.mailgun.net/v2/amp.mailg...&lt;/a&gt;\"><a\">https://api:your_key@api.mailgun.net/v2/amp.mailg....</a\"></a> href=\"<a href=\"https://api:your_key@api.mailgun.net/v2/amp.mailgu...\">https://api:your_key@api.mailgun.net/v2/amp.mailgu...</a>\"&gt;<a href=\"https://api:your_key@api.mailgun.net/v2/amp.mailgu...\">https://api:your_key@api.mailgun.net/v2/amp.mailgu...</a> from_email: Happy App <happy@coolapp.com>\r\ndevelopment: &amp;dev\r\nproduction:\r\n</happy@coolapp.com></pre><p>\r\n\t<code>intercept_email</code>\r\n\tNote the setting. This is great for development and testing because you can have your mailers send all email to your own address with the intended recipient’s address in the subject line. Just put something like this in your mailer:</p>\r\n<pre class=\"raw\">if Settings.intercept_email\r\n   data[:to] = Settings.intercept_email\r\n   data[:subject] = \"[#{to}] \" + subject\r\nelse\r\n   data[:to] = to\r\n   data[:subject] = subject\r\nend\r\n</pre><p>\r\n\tI got the PORO idea (and much of the code) from \r\n\t<a href=\"http://blog.carbonfive.com/2011/11/23/configuration-for-rails-the-right-way/#comment-371271957\">a comment by @iq9</a> on the Carbon Five blog. I found this solution much more elegant that the one proposed by the article’s author. First of all, you don’t have to remember how to type this each time: </p><p>\t<code>YourAppsName::Application.config.setting_name</code> You just use:<br>\r\n\t<code>Settings.setting_name</code>Secondly, it’s much faster:</p>\r\n<pre class=\"raw\">require 'benchmark'\r\nBenchmark.measure do (1..10000000).each { |i| Settings.from_email } end\r\n=&gt;   1.070000   0.050000   1.120000 (  1.126623)\r\nBenchmark.measure do (1..10000000).each { |i| Configurator::Application.config.wkhtmltopdf } end\r\n=&gt;  37.420000   0.030000  37.450000 ( 37.555091)\r\n</pre><p>\r\n\tLast of all, if you’re missing a setting, you get: \r\n\t<br>\r\n\t<code>false</code>\r\n\tInstead of:\r\n\t<br>\r\n\t<code>NoMethodError</code></p><p>\r\n\tHowever, do note that if the setting is missing the call carries a performance hit.\r\n\t<br>\r\n\t<code>method_missing</code></p>\r\n<pre class=\"raw\">Benchmark.measure do (1..10000000).each { |i| Settings.non_existant } end\r\n=&gt;   7.270000   0.010000   7.280000 (  7.371067)\r\n</pre><p>\r\n\tSeven times slower than a hit, but still not bad compared to the example.\r\n\t<br>\r\n\t<code>Configurator</code></p><p>\r\n\tI made some improvements to @iq9′s code. First I put all the initialization stuff in a class method. This method gets called once when the app starts up. But you can call it again later if your configuration has changed. This may come in handy for testing or if your settings frequently change but you don’t want to have to restart the app.</p><p>\r\n\tI replied \r\n\t<a href=\"http://blog.carbonfive.com/2011/11/23/configuration-for-rails-the-right-way/#comment-466057672\">in a comment</a> with a technique that can be used to override settings. In my tests I wanted to cover both intercepted emails and regular emails, so I used this code: </p><p>\t<code>minitest</code></p>\r\n<pre class=\"raw\">it \"should not intercept emails\" do\r\n      Settings.instance_variable_set(:@intercept_email, false)\r\n      UserMailer.send(\"test@example.com\", \"testing\", \"123\")\r\n      FakeWeb.last_request.body.must_equal \"from=#{ERB::Util.url_encode Settings.from_email}&amp;to=test%40example.com&amp;subject=testing&amp;html=123\"\r\n      Settings.reload\r\nend\r\nit \"should intercept emails\" do\r\n      UserMailer.send(\"test@example.com\", \"testing\", \"123\")\r\n      FakeWeb.last_request.body.must_equal \"from=#{ERB::Util.url_encode Settings.from_email}&amp;to=#{ERB::Util.url_encode Settings.intercept_email}&amp;subject=%5Btest%40example.com%5D%20testing&amp;html=123\"\r\nend&lt;br&gt;\r\n</pre><p><em style=\"background-color: initial;\">Check out our open source projects on&nbsp;</em><a href=\"https://github.com/smashingboxes\">GitHub</a><em style=\"background-color: initial;\">.&nbsp;</em></p><p><em style=\"background-color: initial;\">Cover photo by&nbsp;</em><a href=\"https://www.flickr.com/photos/jaja_1985/\" style=\"font-size: 14px; background-color: initial;\"><em>Jarno</em></a></p>",
  "Slug": "plain-old-ruby-object-for-app-settings",
  "slug_history": "--- []\n",
  "visits": 2303,
  "Published": "2012-03-15T08:00:00+00:00",
  "Authorname": "Reed Law",
  "category_id": 1,
  "image_uid": "2014/07/29/18/12/13/728/file",
  "created_at": "2014-06-05T18:25:35+00:00",
  "updated_at": "2014-12-18T23:01:32+00:00",
  "markdown": "",
  "image_alt_text": null,
  "featured": false,
  "database_id": 320,
  "category": {
    "type": "Entry",
    "id": "category_1"
  }
}