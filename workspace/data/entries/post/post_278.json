{
  "id": "post_278",
  "Title": "LinkedIn Thumbnail Workaround",
  "Summary": "Like any self-respecting small business, Smashing Boxes is working on its LinkedIn presence. When sharing posts from the SB blog to the LinkedIn company page we noticed that some images were cropped smack in the center. LinkedIn does not have an image cropping tool so there is no way to control the image preview. Unless…",
  "Body": "<p>\r\n\tLike any self-respecting small business, Smashing Boxes is working on its LinkedIn presence. When sharing posts from the SB blog to the LinkedIn company page we noticed that some images were cropped smack in the center. LinkedIn does not have an image cropping tool so there is no way to control the image preview. Unless images were marked as the “Featured Image” within WordPress, the thumbnails created by LinkedIn were pixelated and distorted. By attempting to solve the thumbnail issue we discovered a couple of workarounds.</p><p id=\"attachment_3225\" style=\"width: 497px\" class=\"wp-caption aligncenter\">\r\n\t<a href=\"http://sbblog.s3.amazonaws.com/wp-content/uploads/2013/03/Smashing-Boxes-Overview-LinkedIn.png\"><img class=\" wp-image-3225\" alt=\"LKND Stealz Distorted Image\" src=\"http://sbblog.s3.amazonaws.com/wp-content/uploads/2013/03/Smashing-Boxes-Overview-LinkedIn.png\" width=\"487\" height=\"192\"></a></p><p class=\"wp-caption-text\">\r\n\tDue to the centering of LinkedIn’s crop, the Stealz logo is missing a few elements.</p><p>\r\n\t<img class=\"alignnone size-full wp-image-3147\" style=\"opacity: 0;\" alt=\"linkedin\" src=\"http://sbblog.s3.amazonaws.com/wp-content/uploads/2013/03/linkedin.jpeg\" width=\"1\" height=\"1\"></p><h3>Solution 1&nbsp;(decent)</h3><p>\r\n\tAfter a little sleuthing, it appears LinkedIn pulls in the first two pictures from shared WordPress posts. In order for pictures to appear as expected on LinkedIn we would have to upload an image that meets the LinkedIn thumbnail dimensions of 180 X 110. Considering the small size, inserting an image optimized for LinkedIn might not work well with the rest of the post’s content.</p><p>\r\n\tThe small image problem can be solved with a little tinkering. Once your image is scaled down and inserted into your post, change its width to 1 and the height to 1. Also, add a style of opacity 0 to your image, which will hide it completely. The new width, height, and opacity will ensure there is not a huge chunk of white space within your WordPress post. After publishing your post and sharing the url on LinkedIn, you should have a non pixelated, non stretched image as the thumbnail:</p><p id=\"attachment_3230\" style=\"width: 518px\" class=\"wp-caption aligncenter\">\r\n\t<a href=\"http://sbblog.s3.amazonaws.com/wp-content/uploads/2013/03/Smashing-Boxes-Overview-LinkedIn2.png\"><img class=\" wp-image-3230 \" alt=\"LKND Optimized Stealz Image\" src=\"http://sbblog.s3.amazonaws.com/wp-content/uploads/2013/03/Smashing-Boxes-Overview-LinkedIn2.png\" width=\"508\" height=\"170\"></a></p><p class=\"wp-caption-text\">\r\n\tAfter applying our first workaround, the thumbnail displays as intended.</p><p>\r\n\tHere’s the code for Solution 1:</p>\r\n<pre><img style=\"opacity: 0;\" alt=\"stealz3\" src=\"&lt;a href=\" http:=\"\" placehold.it=\"\" 180x110\"width=\"1\" \"=\"\"><a href=\"http://placehold.it/180x110\" width=\"1\" \"=\"\">http://placehold.it/180x110\"width=\"1\"</a> height=\"1\" /&gt;<br>\r\n</pre><h3>\r\nSolution 2&nbsp;(better)\r\n</h3><p>\r\n\tWhile the first solution works as a quick fix, if you’re a styling perfectionist the previous work around may prove to be a little too hacky. Even though we made the image “disappear”, it’s still in the DOM and may cause more white space between paragraphs than wanted. Fortunately, we discovered a more stable (and intricate) fix which we are using on this very post.</p><h5>\r\n<strong>Open Graph and WordPress Meta box</strong>\r\n</h5><p>\r\n\t<a href=\"http://ogp.me/\">The Open Graph</a> protocol&nbsp;is a single technology that provides information to represent your webpage. Using Open Graph meta tags allow developers more control over how a piece of shared content is displayed on social networks like Facebook, LinkedIn, and Google +, making it handy for cross-platform social strategies.</p><h5>\r\n<strong>Adding Open Graph to your WordPress theme</strong>\r\n</h5><p>\r\n\tAs noted above, Open Graph tags have to be added within the HEAD tags. So we added the following code to our Header.php file:</p>\r\n<pre>&lt;meta property=\"og:url\" content=\"\"/&gt;&lt;meta property=\"og:title\" content=\"\" /&gt;\r\n&lt;meta property=\"og:description\" content=\"\" /&gt;\r\n&lt;meta property=\"og:type\" content=\"\" /&gt;\r\n&lt;meta property=\"og:image\" content=\"\" /&gt;&lt;br&gt;\r\n</pre><p>\r\n\tBy looking at the tags we can intuit their meaning: Og:url is the url of the post/page, Og:title is the title of the post or page, Og:description is the description of the content we are presenting, Og:type is the type of content (e.g., “article” or “video”), and Og:image is the url of the image you wish to describe/show.</p><p>\r\n\tFor a static HTML file we could simply hardcode the content.&nbsp;In other words we could put</p>\r\n<pre>&lt;meta property=”og:title” content=”How to implement Open Graph with WordPress“/&gt;\r\n</pre><p>\r\n\tinto the HEAD of a page and that title will appear when it is shared. Because WordPress pages are dynamic PHP code, that technique does not apply. Instead, the content of the meta tag will depend on the page or post. Using WordPress template tags to dynamically populate the metadata we get the following:</p>\r\n<pre>&lt;meta property=\"og:url\" content=\"&lt;?php the_permalink(); ?&gt;\"/&gt;\r\n&lt;meta property=\"og:title\" content=\"&lt;?php the_title(); ?&gt;\"/&gt;\r\n&lt;meta property=\"og:description\" content=\"&lt;?php echo strip_tags(get_the_excerpt($post-&gt;ID)); ?&gt;\" /&gt;\r\n&lt;meta property=\"og:type\" content=\"article\" /&gt;\r\n&lt;meta property=\"og:image\" content=\"&lt;?php echo wp_get_attachment_url(get_post_thumbnail_id($post-&gt;ID)); ?&gt;\" /&gt;&lt;br&gt;\r\n</pre><p>\r\n\tThe highlighted code tells WordPress, “If I’m on the ‘Home’ page, output the homepage url, title, description, and featured image”, “If I’m on the ‘About’ page, output the data related to the about page.”</p><p>\r\n\tFrom now on we’ll focus on the og:image tag since it’s where social networks such as LinkedIn and Facebook pull image data from.</p><h5>\r\n<strong>Featured Image, to be or not to be?</strong>\r\n</h5><p>\r\n\tThe code above retrieves the selected featured image and inserts it into the og:image tag. What if you don’t always want to display a featured image? If you repost every piece of content from your blog onto a social network without selecting a featured image, the result will be no content pulled into the og:image tag. The solution is to always add a featured image with the option to choose whether or not to display it.</p><p>\r\n\tIn order to accomplish the stated goal of providing an option to display or hide the featured image within a post, we first made a meta box. Let’s grab a generic one from the WordPress codex:</p>\r\n<pre>/* Define the custom box */\r\nadd_action( ‘add_meta_boxes’, ‘myplugin_add_custom_box’ );\r\n/* Do something with the data entered */\r\nadd_action( ‘save_post’, ‘myplugin_save_postdata’ );\r\n/* Adds a box to the main column on the Post and Page edit screens */\r\nfunction myplugin_add_custom_box() {\r\n$screens = array( ‘post’);\r\nforeach ($screens as $screen) {\r\nadd_meta_box(\r\n‘myplugin_sectionid’,\r\n__( ‘My Post Section Title’, ‘myplugin_textdomain’ ),\r\n‘myplugin_inner_custom_box’,\r\n$screen\r\n);\r\n}\r\n}\r\n/* When the post is saved, save our custom data */\r\nfunction myplugin_save_postdata( $post_id ) {\r\n// First we need to check if the current user is authorised to do this action.\r\nif ( ‘page’ == $_POST['post_type'] ) {\r\nif ( ! current_user_can( ‘edit_page’, $post_id ) )\r\nreturn;\r\n} else {\r\nif ( ! current_user_can( ‘edit_post’, $post_id ) )\r\nreturn;\r\n}\r\n// Second we need to check if the user intended to change this value.\r\nif ( ! isset( $_POST['myplugin_noncename'] ) || ! wp_verify_nonce( $_POST['myplugin_noncename'], plugin_basename( __FILE__ ) ) )\r\nreturn;\r\n// Third we can save the value to the database\r\n//if saving in a custom table, get “”\"”\"”\"”\"”\"post_ID\r\n$post_ID”\"”\"”\"”\"”\"” = $_POST['post_ID'];\r\n//sanitize user input\r\n$mydata = sanitize_text_field( $_POST['myplugin_new_field'] );\r\n// Do something with $mydata\r\n// either using\r\nadd_post_meta($post_ID, ‘_my_meta_value_key’, $mydata, true) or\r\nupdate_post_meta($post_ID, ‘_my_meta_value_key’, $mydata);\r\n}\r\n/* Prints the box content */\r\nfunction myplugin_inner_custom_box( $post ) {\r\n// Use nonce for verification\r\nwp_nonce_field( plugin_basename( __FILE__ ), ‘myplugin_noncename’ );\r\n// The actual fields for data entry\r\n// Use get_post_meta to retrieve an existing value from the database and use the value for the //form\r\n$value = get_post_meta( $_POST['post_ID'], $key = ‘_my_meta_value_key’, $single = true );\r\necho ‘&lt;label for=”myplugin_new_field”&gt;’;\r\n_e(“To Show featured image type, ‘show’ “, ‘myplugin_textdomain’ );\r\necho ‘&lt;/label&gt; ‘;\r\necho ‘&lt;input type=”text” id=”myplugin_new_field” name=”myplugin_new_field” value=”‘.esc_attr($value).’” size=”25″ /&gt;’;\r\n}\r\n?&gt;&lt;br&gt;\r\n</pre><p>\r\n\tAfter adding the above sequence to functions.php in your theme, notice you now have a meta box in your posts. Now let’s configure it to give us the option to display or hide the featured image.&nbsp;Notice the code in the red, the \r\n\t<span style=\"color: #ff0000;\">$value </span><span style=\"color: #000000;\">is the variable that points to the content we type in our &nbsp;meta box.&nbsp;</span>We can use that value to decide whether or not we want to show the featured image.</p><p>\r\n\tIn your template find where the featured image is displayed. Generally, the image will be in the single.php file of your theme, but it may be in more than one location. For our purposes we just want the option to display or hide the featured image on a single post, which will be the single.php file in your template.</p><p>\r\n\tThe featured image syntax, once located, will typically look like the following:</p>\r\n<pre>&lt;?php the_post_thumbnail(); ?&gt;&lt;br&gt;\r\n</pre><p>\r\n\tNow edit the code to work with the meta box.</p>\r\n<pre>&lt;?php\r\n//Get the value\r\n$value = get_post_meta(get_the_ID(), $key = ‘_my_meta_value_key’, $single = true );\r\n//If the value is show\r\nif ($value == ‘show’) {\r\n//Show the thumbnail\r\nthe_post_thumbnail();\r\n}\r\n?&gt;&lt;br&gt;\r\n</pre><p>\r\n\tThe code above retrieves the value of the meta box and if the value is “show”, it will display the featured image. If the “show” text is not in the meta box the featured image will not display, but the image’s information will still be pulled into the og:image tag.</p><p>\r\n\tThe workaround allows WordPress users to display or hide featured images by manipulating the og:image tag. By incorporating Open Graph, users allow social networks to display their featured images as appropriately scaled thumbnails.</p><p>\r\n\t<em style=\"background-color: initial;\">Smashing Boxes is a web and mobile app development company know for creating a lasting experience through bold design and disrupting the status quo. We are entrepreneurs and craftsmen first, and a digital creative agency second. Inspired by our visionary clients, we transform ideas into innovative web and mobile applications. </em><a href=\"http://smashingboxes.com/work\" style=\"background-color: initial;\">Take a look at our work.</a></p><p><em><a href=\"http://smashingboxes.com/work\" style=\"background-color: initial;\"></a>Cover photo by&nbsp;\r\n\t</em><a href=\"https://www.flickr.com/photos/nanpalmero/\" style=\"background-color: initial;\"><em>Nan Palmero</em></a></p>",
  "Slug": "linkedin-thumbnail-workaround",
  "slug_history": "--- []\n",
  "visits": 13514,
  "Published": "2013-03-27T04:00:00+00:00",
  "Authorname": "Kenneth Ashley",
  "category_id": 1,
  "image_uid": "2014/07/30/15/57/49/594/file",
  "created_at": "2014-06-05T18:24:10+00:00",
  "updated_at": "2014-07-31T20:32:55+00:00",
  "markdown": null,
  "image_alt_text": null,
  "featured": false,
  "database_id": 278,
  "category": {
    "type": "Entry",
    "id": "category_1"
  }
}